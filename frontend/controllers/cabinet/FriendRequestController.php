<?php

namespace frontend\controllers\cabinet;

use core\repositories\User\UserRepository;
use Yii;
use core\repositories\communication\FriendRequestRepository;
use core\managers\communication\FriendRequestManager;
use core\entities\communication\FriendRequest;
use core\forms\search\FriendRequestSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * FriendRequestController implements the CRUD actions for FriendRequest model.
 */
class FriendRequestController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    private $repository;
    private $manager;
    private $users;
    public function __construct($id, $module, FriendRequestRepository $repository, FriendRequestManager $manager,UserRepository $users,$config=[])
    {
        $this->users=$users;
        $this->repository=$repository;
        $this->manager=$manager;
        return parent::__construct($id, $module,$config);
    }

    private function checkUser($checked_id)
    {
        if((int)Yii::$app->user->identity->getId()===(int)$checked_id)
        {
         return true;
        }
        else
        {
            throw new \RuntimeException('Object ownership error');
        }
    }
public function afterAction($action, $result)
{
    $this->goBack();
    return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
}

    public function actionSendRequest(int $receiver_id)
    {
        $sender_id=Yii::$app->user->identity->getId();
        $form = new FriendRequest();
        $form->sender_id=$sender_id;
        $form->receiver_id=$receiver_id;
        if ($form->validate() && ($receiver=$this->users->get($receiver_id))) {
            try
            {
                $request = $this->manager->create($form);
                if($request)
                {
                    Yii::$app->session->setFlash('app',"Friend Request to user {$receiver->username} has been sent");
                }
            }catch(\DomainException $e)
            {
                Yii::$app->errorHandler->logException($e);
                Yii::$app->getSession()->setFlash('error',$e->getMessage());
            }
        }
    }

    public function actionAccept($receiver_id)
    {
            try
            {
                $sender_id=Yii::$app->user->identity->getId();
                $this->manager->accept($sender_id,$receiver_id);
            }catch(\DomainException $e)
            {
                Yii::$app->errorHandler->logException($e);
                Yii::$app->session->setFlash('error',$e->getMessage());
            }
    }

    public function actionReject($receiver_id)
    {
        try
        {
            $sender_id=Yii::$app->user->identity->getId();
            $this->manager->reject($sender_id,$receiver_id);
        }catch(\DomainException $e)
        {
            Yii::$app->errorHandler->logException($e);
            Yii::$app->session->setFlash('error',$e->getMessage());
        }
    }

    protected function findModel($sender_id, $receiver_id)
    {
        if (($model = $this->repository->get($sender_id,$receiver_id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
